name: MLB Pipeline

on:
  workflow_dispatch:
    inputs:
      date:
        description: "Date for pipeline (YYYY-MM-DD)"
        required: false
        default: ""
      s3_bucket:
        description: "Override S3 bucket (optional)"
        required: false
        default: ""
      s3_prefix:
        description: "Override S3 prefix/folder (optional)"
        required: false
        default: ""
  schedule:
    - cron: "0 14 * 3-11 *"
    - cron: "0 15 * 12,1,2 *"

env:
  ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ github.event.inputs.s3_bucket || secrets.S3_BUCKET || vars.S3_BUCKET || 'fantasy-sports-csvs' }}
  S3_PREFIX: ${{ github.event.inputs.s3_prefix || vars.S3_PREFIX || 'baseball' }}

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Determine pipeline DATE and YDAY (America/New_York)
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.date }}" ]; then
            D="${{ github.event.inputs.date }}"
          else
            D="$(TZ=America/New_York date +%Y-%m-%d)"
          fi
          Y="$(date -d "$D - 1 day" +%Y-%m-%d)"
          echo "DATE=$D"  >> "$GITHUB_ENV"
          echo "YDAY=$Y"  >> "$GITHUB_ENV"
          echo "Using DATE=$D (ET), YDAY=$Y"

      - name: Prepare directories
        run: |
          mkdir -p data/raw/probable_starters data/raw/rosters data/raw/weather data/raw/boxscores data/raw/betting
          mkdir -p data/analysis

      # ---------- S3: configure + restore history ----------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate AWS env
        run: |
          echo "::notice::Bucket='${S3_BUCKET}' Prefix='${S3_PREFIX}' Region='${AWS_REGION}'"
          test -n "${S3_BUCKET}" || (echo "❌ S3_BUCKET is empty" && exit 1)
          test -n "${AWS_REGION}" || (echo "❌ AWS_REGION is empty" && exit 1)
          aws sts get-caller-identity >/dev/null || (echo "❌ AWS credentials invalid" && exit 1)
          echo "✅ AWS creds OK. Using s3://${S3_BUCKET}/${S3_PREFIX}/"

      - name: Restore history from S3 (if exists)
        run: |
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/player_game_log.jsonl" ./player_game_log.jsonl || true
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/eval_history.jsonl" data/analysis/eval_history.jsonl || true
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/ranked_history.jsonl" data/analysis/ranked_history.jsonl || true

      # ---------- SCRAPERS (order matters) ----------
      - name: Run probable starters scraper
        run: python mlb_probable_starters_scraper.py --date ${{ env.DATE }}

      - name: Run roster scraper (injects probable starters)
        run: python mlb_rosters_scraper.py --date ${{ env.DATE }}

      - name: Run weather scraper
        run: python mlb_weather_scraper.py --date ${{ env.DATE }}

      - name: Run box scores scraper (today / actual game date)
        run: python mlb_box_scraper.py --date ${{ env.DATE }}

      - name: Run betting odds scraper
        run: python mlb_betting_odds_scraper.py --date ${{ env.DATE }} --api-key ${{ env.ODDS_API_KEY }}

      # ---------- COMBINE + ANALYZE ----------
      - name: Combine all data
        run: python mlb_combine_all_files.py --date ${{ env.DATE }}

      - name: Configure PYTHONPATH for analyzer
        shell: bash
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE:$GITHUB_WORKSPACE/src" >> "$GITHUB_ENV"

      - name: Run analyzer (with conflict resolver)
        shell: bash
        run: |
          set -e
          if python -c "import analyzer, analyzer.cli" 2>/dev/null; then
            echo "Running analyzer as package (python -m analyzer.cli)"
            python -m analyzer.cli \
              --date ${{ env.DATE }} \
              --archive player_game_log.jsonl \
              --structured structured_players_${{ env.DATE }}.json \
              --resolve-conflicts
          else
            echo "Package import failed; running analyzer by path (python analyzer/cli.py)"
            python analyzer/cli.py \
              --date ${{ env.DATE }} \
              --archive player_game_log.jsonl \
              --structured structured_players_${{ env.DATE }}.json \
              --resolve-conflicts
          fi

      # ---------- Pull yesterday's evaluation CSV for recap ----------
      - name: Download yesterday evaluation from S3 (if exists)
        run: |
          aws s3 cp "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.YDAY }}/evaluation_${{ env.YDAY }}.csv" "data/analysis/evaluation_${{ env.YDAY }}.csv" --only-show-errors || true
          if [ -f "data/analysis/evaluation_${{ env.YDAY }}.csv" ]; then
            echo "Found evaluation_${{ env.YDAY }}.csv for recap."
          else
            echo "::notice::No evaluation_${{ env.YDAY }}.csv found; recap will be empty."
          fi

      - name: Build Daily Report (recap + today)
        run: |
          python tools/daily_report_builder.py \
            --date "${{ env.DATE }}" \
            --yday "${{ env.YDAY }}" \
            --structured "structured_players_${{ env.DATE }}.json" \
            --tiers-hit "data/analysis/tiers_hitters_${{ env.DATE }}.csv" \
            --tiers-sp  "data/analysis/tiers_starting_pitchers_${{ env.DATE }}.csv" \
            --eval-yday "data/analysis/evaluation_${{ env.YDAY }}.csv" \
            --ranked-full "data/analysis/ranked_full_${{ env.DATE }}.csv" \
            --out "data/analysis/daily_report_${{ env.DATE }}.json" \
            --hitter-target-min "${{ vars.HITTER_TIER_MIN || '6.0' }}" \
            --sp-target-min "${{ vars.SP_TIER_MIN || '6.0' }}" \
            --hitter-fade-max "${{ vars.HITTER_FADE_MAX || '4.0' }}" \
            --sp-fade-max "${{ vars.SP_FADE_MAX || '4.0' }}"

      - name: Verify expected outputs exist
        shell: bash
        run: |
          set -e
          declare -a files=(
            "data/analysis/tiers_hitters_${DATE}.csv"
            "data/analysis/tiers_starting_pitchers_${DATE}.csv"
            "data/analysis/ranked_full_${DATE}.csv"
            "data/analysis/daily_report_${DATE}.json"
          )
          for f in "${files[@]}"; do
            if [ ! -f "$f" ]; then
              echo "::warning::Missing $f"
            else
              echo "Found $f"
            fi
          done

      # ---------- Upload updated history to S3 ----------
      - name: Upload updated history to S3
        run: |
          aws s3 cp ./player_game_log.jsonl "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/player_game_log.jsonl"
          aws s3 cp data/analysis/eval_history.jsonl "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/eval_history.jsonl"
          if [ -f data/analysis/ranked_history.jsonl ]; then
            aws s3 cp data/analysis/ranked_history.jsonl "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/ranked_history.jsonl"
          fi

      # ---------- Upload today's outputs to dated folder ----------
      - name: Upload daily outputs to S3
        run: |
          aws s3 cp "structured_players_${{ env.DATE }}.json" "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.DATE }}/" --only-show-errors || true
          aws s3 cp "data/analysis/tiers_hitters_${{ env.DATE }}.csv" "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.DATE }}/" --only-show-errors || true
          aws s3 cp "data/analysis/tiers_starting_pitchers_${{ env.DATE }}.csv" "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.DATE }}/" --only-show-errors || true
          aws s3 cp "data/analysis/tiers_hitters_filtered_${{ env.DATE }}.csv" "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.DATE }}/" --only-show-errors || true
          aws s3 cp "data/analysis/tiers_starting_pitchers_filtered_${{ env.DATE }}.csv" "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.DATE }}/" --only-show-errors || true
          aws s3 cp "data/analysis/tiers_conflicts_${{ env.DATE }}.csv" "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.DATE }}/" --only-show-errors || true
          aws s3 cp "data/analysis/evaluation_${{ env.DATE }}.csv" "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.DATE }}/" --only-show-errors || true
          aws s3 cp "data/analysis/ranked_full_${{ env.DATE }}.csv" "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.DATE }}/" --only-show-errors || true
          aws s3 cp "data/analysis/ranked_full_${{ env.DATE }}.parquet" "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.DATE }}/" --only-show-errors || true
          aws s3 cp "data/analysis/daily_report_${{ env.DATE }}.json" "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${{ env.DATE }}/" --only-show-errors || true

      - name: List S3 daily folder
        run: aws s3 ls "s3://${S3_BUCKET}/${S3_PREFIX}/mlb-history/daily/${DATE}/" || true

      # ---------- Artifacts ----------
      - name: Upload raw inputs
        uses: actions/upload-artifact@v4
        with:
          name: mlb-raw-${{ env.DATE }}
          path: data/raw/
          if-no-files-found: warn

      - name: Upload combined + analysis outputs
        uses: actions/upload-artifact@v4
        with:
          name: mlb-analysis-${{ env.DATE }}
          path: |
            structured_players_${{ env.DATE }}.json
            player_game_log.jsonl
            data/analysis/tiers_hitters_${{ env.DATE }}.csv
            data/analysis/tiers_starting_pitchers_${{ env.DATE }}.csv
            data/analysis/tiers_hitters_filtered_${{ env.DATE }}.csv
            data/analysis/tiers_starting_pitchers_filtered_${{ env.DATE }}.csv
            data/analysis/tiers_conflicts_${{ env.DATE }}.csv
            data/analysis/evaluation_${{ env.DATE }}.csv
            data/analysis/ranked_full_${{ env.DATE }}.csv
            data/analysis/ranked_full_${{ env.DATE }}.parquet
            data/analysis/eval_history.jsonl
            data/analysis/ranked_history.jsonl
            data/analysis/daily_report_${{ env.DATE }}.json
          if-no-files-found: warn
